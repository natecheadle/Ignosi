trigger:
  - master

variables:
- name: VCPKG_BINARY_SOURCES
  value: 'clear;nuget,https://pkgs.dev.azure.com/natecheadle/IgnosiGameEngine/_packaging/VCPKG_CACHE/nuget/v3/index.json,readwrite'

- name: GTEST_OUTPUT
  value: 'xml:$(System.DefaultWorkingDirectory)/TEST-REPORT.xml'

- name: TEST_APP_NAME
  value: 'ignosi-memory-test'

stages:
- stage: BUILD_TEST
  jobs:
  - job: WINDOWS_MSVC
    pool:
      vmImage: windows-latest
    strategy:
      matrix:
        DEBUG_X86:
          arch: x86
          cmakePreset: Windows-MSVC-x86-Debug

        RELEASE_X86:
          arch: x86
          cmakePreset: Windows-MSVC-x86-Release

        DEBUG_X64:
          arch: amd64
          cmakePreset: Windows-MSVC-x64-Debug

        RELEASE_X64:
          arch: amd64
          cmakePreset: Windows-MSVC-x64-Release

    steps:
    - task: BatchScript@1
      inputs:
        filename: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat'
        arguments: '-arch=$(arch)'
        modifyEnvironment: true
      displayName: "Initialize Visual Studio Environment"

    - script: |
        choco install ninja
      displayName: "Install Dependencies"

    - template: templates/build-app.yml
      parameters:
        preset: $(cmakePreset)

    - template: templates/test-app.yml
      parameters:
        test_binaries: 
        - $(TEST_APP_NAME)

  - job: LINUX_GCC
    pool:
      vmImage: ubuntu-latest

    strategy:
      matrix:
        DEBUG_12:
          gccVersion: 12
          cmakePreset: Linux-GCC-Debug

        RELEASE_12:
          gccVersion: 12
          cmakePreset: Linux-GCC-Release

    steps:
    - template: templates/install-dependencies.yml
      parameters:
        dependencies: 'ninja-build libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config'

    - script: |
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-$(gccVersion) 10
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$(gccVersion) 10

      displayName: "Configure Compiler Version"


    - template: templates/build-app.yml
      parameters:
        preset: $(cmakePreset)

    - template: templates/test-app.yml
      parameters:
        test_binaries: 
        - '$(TEST_APP_NAME)'

  - job: LINUX_LLVM
    pool:
      vmImage: ubuntu-latest

    strategy:
      matrix:
        DEBUG_15:
          llvmVersion: 15
          cmakePreset: Linux-LLVM-Debug

        RELEASE_15:
          llvmVersion: 15
          cmakePreset: Linux-LLVM-Release

    steps:
    - template: templates/install-dependencies.yml
      parameters:
        dependencies: 'ninja-build libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config'

    - script: |
        sudo rm /usr/bin/clang
        sudo rm /usr/bin/clang++
        sudo ln -s /usr/bin/clang-$(llvmVersion) /usr/bin/clang
        sudo ln -s /usr/bin/clang++-$(llvmVersion) /usr/bin/clang++
      displayName: "Configure Compiler Version"

    - template: templates/build-app.yml
      parameters:
        preset: $(cmakePreset)

    - template: templates/test-app.yml
      parameters:
        test_binaries: 
        - $(TEST_APP_NAME)

  - job: LLVM_CODE_COVERAGE
    variables:
    - name: CODE_COVERAGE_NAME
      value: 'code_coverage'
    steps:
    - template: templates/install-dependencies.yml
      parameters:
        dependencies: 'ninja-build libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config'

    - script: |
        sudo rm /usr/bin/clang
        sudo rm /usr/bin/clang++
        sudo rm /usr/bin/llvm-profdata
        sudo rm /usr/bin/llvm-cov
        sudo ln -s /usr/bin/clang-15 /usr/bin/clang
        sudo ln -s /usr/bin/clang++-15 /usr/bin/clang++
        sudo ln -s /usr/bin/llvm-profdata-15 /usr/bin/llvm-profdata
        sudo ln -s /usr/bin/llvm-cov-15 /usr/bin/llvm-cov
      displayName: "Configure Compiler Version"

    - template: templates/build-app.yml
      parameters:
        preset: Linux-LLVM-Debug
        cmakeArgs: '-DBUILD_COVERAGE=TRUE'

    - script: |
        export LLVM_PROFILE_FILE='$(CODE_COVERAGE_NAME).profraw'
        $(Build.ArtifactStagingDirectory)/bin/$(TEST_APP_NAME)
      displayName: 'Run Unit Tests'

    - script: |
        llvm-profdata merge -sparse $(CODE_COVERAGE_NAME).profraw -o $(CODE_COVERAGE_NAME).profdata
        llvm-cov export $(Build.ArtifactStagingDirectory)/bin/$(TEST_APP_NAME) -instr-profile=$(CODE_COVERAGE_NAME).profdata -ignore-filename-regex="vcpkg|[Tt]est" -format lcov > $(CODE_COVERAGE_NAME).dat
      displayName: 'Compile Coverage Report'

    - task: reportgenerator@5
      displayName: 'Report Generator'
      inputs:
        reports: '$(CODE_COVERAGE_NAME).dat'
        targetDir: 'coveragereport'
        publishCodeCoverageResults: true
 
        

